{
  "name": "reshape",
  "version": "1.0.0",
  "description": "reshape your code",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kentaromiura/Reshape.git"
  },
  "author": {
    "name": "Cristian Carlesso",
    "email": "@kentaromiura"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kentaromiura/Reshape/issues"
  },
  "dependencies": {
    "clint": "*",
    "glob": "*",
    "jscodeshift": "*"
  },
  "homepage": "https://github.com/kentaromiura/Reshape#readme",
  "gitHead": "06df53a14b86c47d0d2818057c270ede4c2d93d1",
  "readme": "Reshape\n===========\n\n_Reshape your code_\n\nReshape is a refactoring tool that you can use to make changes to your JavaScript projects in a easy to test way\n\nReshape will accept a glob and/or a list of files and run a series of transforms on this file paths,\nthe output of every transform gets feed as the input of the next one, \nonce finished it will pass the results of all those transforms to another list of transform,\nso that they can act at a global level.\n\nExample\n=======\n\nLet's say we have an input folder like this\n```\n./test/input/\n├── a.js\n├── b.js\n└── c.js\n```\n\nwhere _c_ just requires _a_ and _b_ which in our example are just plain objects.\n\nWe want to move those files to an _output_ directory, \nthen we want to rename those files to add _reshaped_ in front of the file name,\nthen though c.js will try to require a and b, but those don't exist anymore, \nso we have to change the source to reflect the name change.\n\nso we want to write a series of refactor step\n\n*objectify* will take a path and create and object of the type:\n```\n{\n\tpath,\n\tsource\n}\n```\n\nas you can notice the first transform will always take an array of String and can return whatever you want,\nin my case I'll just return an object so I can decorate it with all the metadata I need\n\nthen this object will be feed to *move* that will just set a _delete_ flag with the current path before modifying it to the new one\n\nthen the path will be again changed by *rename* to add the _reshaped_ in front of the source name\n\nthen *fixRequires* will use [jscodeshift](https://github.com/facebook/jscodeshift) (which is always passed as a second parameter) to find and replace the _require_ s using static analysis\n\nup until this point nothing really happened, we just collected actions to do, we now need an\n*applyChanges* transform that uses the collected metadata and does actions on those\n\nthe command for applying all this series of refactoring will just be:\n\n```\n./reshape -p ./test/**/*.js -e ./test_transforms/objectify.js ./test_transforms/move.js ./test_transforms/rename.js -aa ./test_transforms/fixRequires.js ./test_transforms/applyChanges.js\n```\nor if your shell don't support glob\n```\n./reshape -p \"./test/**/*.js\" -e ./test_transforms/objectify.js ./test_transforms/move.js ./test_transforms/rename.js -aa ./test_transforms/fixRequires.js ./test_transforms/applyChanges.js\n```\n",
  "readmeFilename": "README.md",
  "_id": "reshape@1.0.0",
  "_shasum": "7d94a1683f666d4f153a6301478f2ccfba6d59df",
  "_from": "git+https://github.com/kentaromiura/Reshape.git",
  "_resolved": "git+https://github.com/kentaromiura/Reshape.git#06df53a14b86c47d0d2818057c270ede4c2d93d1"
}
